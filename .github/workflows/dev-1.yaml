name: "DEV 1 - Abdul"

# The total recommended execution time for the "CI/CD Pull Request" workflow is around 20 minutes.

on:
  workflow_dispatch:
    inputs:
      invitations_branch:
        description: "This is the branch/tag of Galleri-Invitations be deployed to the DEV environment"
        required: true
      frontend_branch:
        description: "This is the branch/tag of the Galleri frontend to be deployed to the DEV environment"
        required: true
      database_seeding:
        description: "Determines if the seeding scripts are run to populate the database"
        required: true
        type: choice
        default: "yes"
        options:
          - "yes"
          - "no"
      tf_action:
        type: choice
        description: Terraform action to be carried out against DEV environment
        required: true
        default: apply
        options:
          - apply
          - destroy
      test:
        type: choice
        description: Should tests be run?
        required: true
        default: "yes"
        options:
          - "yes"
          - "no"
      skip_default_checks:
        type: choice
        description: Should checks be run?
        required: true
        default: "no"
        options:
          - "yes"
          - "no"

env:
  AWS_ACCOUNT_ID: ${{ secrets.DEV_AWS_ACCOUNT_ID }}
jobs:
  metadata:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    env:
      environment: "dev-1"
    outputs:
      build_datetime_london: ${{ steps.variables.outputs.build_datetime_london }}
      build_datetime: ${{ steps.variables.outputs.build_datetime }}
      build_timestamp: ${{ steps.variables.outputs.build_timestamp }}
      build_epoch: ${{ steps.variables.outputs.build_epoch }}
      nodejs_version: ${{ steps.variables.outputs.nodejs_version }}
      python_version: ${{ steps.variables.outputs.python_version }}
      terraform_version: ${{ steps.variables.outputs.terraform_version }}
      version: ${{ steps.variables.outputs.version }}
      does_pull_request_exist: ${{ steps.pr_exists.outputs.does_pull_request_exist }}
      environment: ${{ env.environment }}
      environment_type: ${{ steps.variables.outputs.environment_type }}
      invitations_branch: ${{ github.event.inputs.invitations_branch }}
      frontend_branch: ${{ github.event.inputs.frontend_branch }}
      database_seeding: ${{ github.event.inputs.database_seeding }}
      tf_action: ${{ github.event.inputs.tf_action }}
      test: ${{ github.event.inputs.test }}
      skip_default_checks: ${{ github.event.inputs.skip_default_checks }}
    steps:
      - name: "print environment vars"
        run: |
          echo job running on branch: ${{ github.base_ref }}
          echo environment is: ${{ env.environment }}
          echo seed database: ${{ github.event.inputs.database_seeding }}
          echo run tests: ${{ github.event.inputs.test }}
      - name: "Checkout code"
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.invitations_branch }}
      - name: "Set CI/CD variables"
        id: variables
        run: |
          datetime=$(date -u +'%Y-%m-%dT%H:%M:%S%z')
          echo "build_datetime_london=$(TZ=Europe/London date --date=$datetime +'%Y-%m-%dT%H:%M:%S%z')" >> $GITHUB_OUTPUT
          echo "build_datetime=$datetime" >> $GITHUB_OUTPUT
          echo "build_timestamp=$(date --date=$datetime -u +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
          echo "build_epoch=$(date --date=$datetime -u +'%s')" >> $GITHUB_OUTPUT
          echo "nodejs_version=$(grep nodejs .tool-versions | cut -f2 -d' ')" >> $GITHUB_OUTPUT
          echo "python_version=$(grep python .tool-versions | cut -f2 -d' ')" >> $GITHUB_OUTPUT
          echo "terraform_version=$(grep terraform .tool-versions | cut -f2 -d' ')" >> $GITHUB_OUTPUT
          echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT
          echo "environment=dev-1" >> $GITHUB_OUTPUT
          echo "environment_type=$(echo '${{ env.environment }}' | cut -f1 -d'-')" >> $GITHUB_OUTPUT
      - name: "Check if pull request exists for this branch"
        id: pr_exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          branch_name=${GITHUB_HEAD_REF:-$(echo $GITHUB_REF | sed 's#refs/heads/##')}
          echo "Current branch is '$branch_name'"
          if gh pr list --head $branch_name | grep -q .; then
            echo "Pull request exists"
            echo "does_pull_request_exist=true" >> $GITHUB_OUTPUT
          else
            echo "Pull request doesn't exist"
            echo "does_pull_request_exist=false" >> $GITHUB_OUTPUT
          fi
      - name: "List variables"
        run: |
          export BUILD_DATETIME_LONDON="${{ steps.variables.outputs.build_datetime_london }}"
          export BUILD_DATETIME="${{ steps.variables.outputs.build_datetime }}"
          export BUILD_TIMESTAMP="${{ steps.variables.outputs.build_timestamp }}"
          export BUILD_EPOCH="${{ steps.variables.outputs.build_epoch }}"
          export NODEJS_VERSION="${{ steps.variables.outputs.nodejs_version }}"
          export PYTHON_VERSION="${{ steps.variables.outputs.python_version }}"
          export TERRAFORM_VERSION="${{ steps.variables.outputs.terraform_version }}"
          export VERSION="${{ steps.variables.outputs.version }}"
          export DOES_PULL_REQUEST_EXIST="${{ steps.pr_exists.outputs.does_pull_request_exist }}"
          make list-variables
  commit-stage: # Recommended maximum execution time is 2 minutes
    needs: [metadata]
    uses: ./.github/workflows/stage-1-commit.yaml
    with:
      build_datetime: "${{ needs.metadata.outputs.build_datetime }}"
      build_timestamp: "${{ needs.metadata.outputs.build_timestamp }}"
      build_epoch: "${{ needs.metadata.outputs.build_epoch }}"
      nodejs_version: "${{ needs.metadata.outputs.nodejs_version }}"
      python_version: "${{ needs.metadata.outputs.python_version }}"
      terraform_version: "${{ needs.metadata.outputs.terraform_version }}"
      version: "${{ needs.metadata.outputs.version }}"
      invitations_branch: "${{ github.event.inputs.invitations_branch }}"
    secrets: inherit

  test-stage: # Recommended maximum execution time is 5 minutes
    needs: [metadata]
    uses: ./.github/workflows/stage-2-test.yaml
    if: needs.metadata.outputs.tf_action != 'destroy' && needs.metadata.outputs.skip_default_checks == 'yes'
    with:
      build_datetime: "${{ needs.metadata.outputs.build_datetime }}"
      build_timestamp: "${{ needs.metadata.outputs.build_timestamp }}"
      build_epoch: "${{ needs.metadata.outputs.build_epoch }}"
      nodejs_version: "${{ needs.metadata.outputs.nodejs_version }}"
      python_version: "${{ needs.metadata.outputs.python_version }}"
      terraform_version: "${{ needs.metadata.outputs.terraform_version }}"
      version: "${{ needs.metadata.outputs.version }}"
      invitations_branch: "${{ github.event.inputs.invitations_branch }}"
    secrets: inherit

  build-stage: # Recommended maximum execution time is 10 minutes
    needs: [metadata]
    uses: ./.github/workflows/stage-3-build.yaml
    with:
      build_datetime: "${{ needs.metadata.outputs.build_datetime }}"
      build_timestamp: "${{ needs.metadata.outputs.build_timestamp }}"
      build_epoch: "${{ needs.metadata.outputs.build_epoch }}"
      nodejs_version: "${{ needs.metadata.outputs.nodejs_version }}"
      python_version: "${{ needs.metadata.outputs.python_version }}"
      terraform_version: "${{ needs.metadata.outputs.terraform_version }}"
      invitations_branch: "${{ github.event.inputs.invitations_branch }}"
      version: "${{ needs.metadata.outputs.version }}"
      environment: "${{ needs.metadata.outputs.environment }}"
      frontend_branch: "${{ github.event.inputs.frontend_branch }}"
      tf_action: "${{ needs.metadata.outputs.tf_action }}"
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.DEV_AWS_ACCOUNT_ID }}
      USERS: ${{ secrets.USERS }}
      CIS2_SECRET: ${{ secrets.CIS2_SECRET }}
      NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}

  post-build-stage:
    needs: [metadata, build-stage]
    uses: ./.github/workflows/post-build.yaml
    if: needs.metadata.outputs.tf_action != 'destroy'
    with:
      build_datetime: "${{ needs.metadata.outputs.build_datetime }}"
      build_timestamp: "${{ needs.metadata.outputs.build_timestamp }}"
      build_epoch: "${{ needs.metadata.outputs.build_epoch }}"
      nodejs_version: "${{ needs.metadata.outputs.nodejs_version }}"
      python_version: "${{ needs.metadata.outputs.python_version }}"
      version: "${{ needs.metadata.outputs.version }}"
      environment: "${{ needs.metadata.outputs.environment }}"
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.DEV_AWS_ACCOUNT_ID }}

  data-stage: # Recommended maximum execution time is 10 minutes
    needs: [metadata, build-stage]
    uses: ./.github/workflows/stage-4-load-data.yaml
    if: needs.metadata.outputs.database_seeding == 'yes' && needs.metadata.outputs.tf_action != 'destroy'
    with:
      build_datetime: "${{ needs.metadata.outputs.build_datetime }}"
      build_timestamp: "${{ needs.metadata.outputs.build_timestamp }}"
      build_epoch: "${{ needs.metadata.outputs.build_epoch }}"
      nodejs_version: "${{ needs.metadata.outputs.nodejs_version }}"
      python_version: "${{ needs.metadata.outputs.python_version }}"
      terraform_version: "${{ needs.metadata.outputs.terraform_version }}"
      version: "${{ needs.metadata.outputs.version }}"
      environment: "${{ needs.metadata.outputs.environment }}"
      environment_type: "${{ needs.metadata.outputs.environment_type }}"
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.DEV_AWS_ACCOUNT_ID }}

  acceptance-stage: # Recommended maximum execution time is 10 minutes
    needs: [metadata, build-stage, data-stage]
    uses: ./.github/workflows/stage-5-acceptance.yaml
    if: needs.metadata.outputs.test == 'yes' && (needs.data-stage.result == 'success' || needs.data-stage.result == 'skipped')
    with:
      build_datetime: "${{ needs.metadata.outputs.build_datetime }}"
      build_timestamp: "${{ needs.metadata.outputs.build_timestamp }}"
      build_epoch: "${{ needs.metadata.outputs.build_epoch }}"
      nodejs_version: "${{ needs.metadata.outputs.nodejs_version }}"
      python_version: "${{ needs.metadata.outputs.python_version }}"
      terraform_version: "${{ needs.metadata.outputs.terraform_version }}"
      version: "${{ needs.metadata.outputs.version }}"
      environment: ${{ needs.metadata.outputs.environment }}
      test: ${{ needs.metadata.outputs.test }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.DEV_AWS_ACCOUNT_ID }}
