name: "Build stage"

on:
  workflow_call:
    inputs:
      build_datetime:
        description: "Build datetime, set by the CI/CD pipeline workflow"
        required: true
        type: string
      build_timestamp:
        description: "Build timestamp, set by the CI/CD pipeline workflow"
        required: true
        type: string
      build_epoch:
        description: "Build epoch, set by the CI/CD pipeline workflow"
        required: true
        type: string
      nodejs_version:
        description: "Node.js version, set by the CI/CD pipeline workflow"
        required: true
        type: string
      python_version:
        description: "Python version, set by the CI/CD pipeline workflow"
        required: true
        type: string
      terraform_version:
        description: "Terraform version, set by the CI/CD pipeline workflow"
        required: true
        type: string
      version:
        description: "Version of the software, set by the CI/CD pipeline workflow"
        required: true
        type: string
      environment:
        description: "the environment to deploy terraform into"
        required: true
        type: string
      invitations_branch:
        description: "Branch of invitations repository to checkout"
        required: false
        type: string
      frontend_branch:
        description: "Branch of frontend repository to checkout"
        required: false
        type: string
      tf_action:
        description: "Terraform action to be performed against target environment"
        default: apply
        type: string
        required: false
    secrets:
      AWS_ACCOUNT_ID:
        required: true
      USERS:
        required: true
      CIS2_SECRET:
        required: true
      NEXTAUTH_SECRET:
        required: true
      AWS_ROLE_ARN:
        required: true

env:
  role-to-assume: ${{ vars.AWS_ROLE_ARN }}
  aws-region: ${{ vars.aws_region }}
  aws-bucket-name: ${{ vars.aws_bucket_name }}
  aws-bucket-key-name: ${{ vars.aws_bucket_key_name }}
  environment: ${{ inputs.environment }}
  frontend-branch: ${{ inputs.frontend_branch }}
  invitations-branch: ${{ inputs.invitations_branch }}
  tf-action: ${{ inputs.tf_action }}
  # AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  # USERS: ${{ secrets.USERS }}
  # CIS2_SECRET: ${{ secrets.CIS2_SECRET }}
  # NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}

jobs:
  build:
    permissions:
      id-token: write # This is required for aws oidc connection
      contents: read # This is required for actions/checkout
    runs-on: ubuntu-latest
    timeout-minutes: 35
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
        with:
          ref: "${{ env.invitations-branch }}"
          fetch-depth: 0 # Full history is needed to scan all commits
      - name: Install dependency
        run: |
          pip install boto3
          pip install rstr
          pip install random_word
      - name: "Create infrastructure"
        uses: ./.github/actions/terraform
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.aws-region }}
          aws-bucket-name: ${{ env.aws-bucket-name }}
          aws-bucket-key-name: ${{ env.aws-bucket-key-name }}
          environment: ${{ env.environment }}
          invitations-branch: ${{ env.invitations-branch }}
          frontend-branch: ${{ env.frontend-branch }}
          tf-action: ${{ env.tf-action }}
          TF_VAR_USERS: ${{ secrets.USERS }}
          TF_VAR_CIS2_SECRET: ${{ secrets.CIS2_SECRET }}
          TF_VAR_NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        timeout-minutes: 15
# name: "Build stage"

# on:
#   workflow_call:
#     inputs:
#       build_datetime:
#         description: "Build datetime, set by the CI/CD pipeline workflow"
#         required: true
#         type: string
#       build_timestamp:
#         description: "Build timestamp, set by the CI/CD pipeline workflow"
#         required: true
#         type: string
#       build_epoch:
#         description: "Build epoch, set by the CI/CD pipeline workflow"
#         required: true
#         type: string
#       nodejs_version:
#         description: "Node.js version, set by the CI/CD pipeline workflow"
#         required: true
#         type: string
#       python_version:
#         description: "Python version, set by the CI/CD pipeline workflow"
#         required: true
#         type: string
#       terraform_version:
#         description: "Terraform version, set by the CI/CD pipeline workflow"
#         required: true
#         type: string
#       version:
#         description: "Version of the software, set by the CI/CD pipeline workflow"
#         required: true
#         type: string

# jobs:
#   artefact-1:
#     runs-on: ubuntu-latest
#     timeout-minutes: 3
#     steps:
#       - name: "Checkout code"
#         uses: actions/checkout@v4
#       - name: "Build artefact 1"
#         run: |
#           echo "Building artefact 1 ..."
#       - name: "Check artefact 1"
#         run: |
#           echo "Checking artefact 1 ..."
#       - name: "Upload artefact 1"
#         run: |
#           echo "Uploading artefact 1 ..."
#           # TODO: Use either action/cache or action/upload-artifact
#   artefact-2:
#     runs-on: ubuntu-latest
#     timeout-minutes: 3
#     steps:
#       - name: "Checkout code"
#         uses: actions/checkout@v4
#       - name: "Build artefact 2"
#         run: |
#           echo "Building artefact 2 ..."
#       - name: "Check artefact 2"
#         run: |
#           echo "Checking artefact 2 ..."
#       - name: "Upload artefact 2"
#         run: |
#           echo "Uploading artefact 2 ..."
#           # TODO: Use either action/cache or action/upload-artifact
#   success:
#     runs-on: ubuntu-latest
#     needs: [artefact-1, artefact-2]
#     steps:
#       - name: "Check prerequisites for notification"
#         id: check
#         run: echo "secret_exist=${{ secrets.TEAMS_NOTIFICATION_WEBHOOK_URL != '' }}" >> $GITHUB_OUTPUT
#       - name: "Notify on build completion"
#         if: steps.check.outputs.secret_exist == 'true'
#         uses: nhs-england-tools/notify-msteams-action@v0.0.4
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           teams-webhook-url: ${{ secrets.TEAMS_NOTIFICATION_WEBHOOK_URL }}
#           message-title: "Notification title"
#           message-text: "This is a notification body"
#           link: ${{ github.event.pull_request.html_url }}
