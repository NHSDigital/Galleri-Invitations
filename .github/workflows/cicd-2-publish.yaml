name: "CI/CD publish"

on:
  # pull_request:
  #   types: [closed]
      # branches:
      # - main
  pull_request:
    types: [opened, reopened, edited, synchronize]

jobs:
  metadata:
    runs-on: ubuntu-latest
    # if: github.event.pull_request.merged == true
    timeout-minutes: 1
    outputs:
      build_datetime: ${{ steps.variables.outputs.build_datetime }}
      build_timestamp: ${{ steps.variables.outputs.build_timestamp }}
      build_epoch: ${{ steps.variables.outputs.build_epoch }}
      nodejs_version: ${{ steps.variables.outputs.nodejs_version }}
      python_version: ${{ steps.variables.outputs.python_version }}
      terraform_version: ${{ steps.variables.outputs.terraform_version }}
      version: ${{ steps.variables.outputs.version }}
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
      - name: "Set CI/CD variables"
        id: variables
        run: |
          datetime=$(date -u +'%Y-%m-%dT%H:%M:%S%z')
          echo "build_datetime=$datetime" >> $GITHUB_OUTPUT
          echo "build_timestamp=$(date --date=$datetime -u +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
          echo "build_epoch=$(date --date=$datetime -u +'%s')" >> $GITHUB_OUTPUT
          echo "nodejs_version=$(grep nodejs .tool-versions | cut -f2 -d' ')" >> $GITHUB_OUTPUT
          echo "python_version=$(grep python .tool-versions | cut -f2 -d' ')" >> $GITHUB_OUTPUT
          echo "terraform_version=$(grep terraform .tool-versions | cut -f2 -d' ')" >> $GITHUB_OUTPUT
          echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT
      - name: "List variables"
        run: |
          export BUILD_DATETIME="${{ steps.variables.outputs.build_datetime }}"
          export BUILD_TIMESTAMP="${{ steps.variables.outputs.build_timestamp }}"
          export BUILD_EPOCH="${{ steps.variables.outputs.build_epoch }}"
          export NODEJS_VERSION="${{ steps.variables.outputs.nodejs_version }}"
          export PYTHON_VERSION="${{ steps.variables.outputs.python_version }}"
          export TERRAFORM_VERSION="${{ steps.variables.outputs.terraform_version }}"
          export VERSION="${{ steps.variables.outputs.version }}"
          make list-variables
  publish:
    runs-on: ubuntu-latest
    needs: [metadata]
    # if: github.event.pull_request.merged == true
    timeout-minutes: 3
    env:
      confluence_endpoint: "https://nhsd-confluence.digital.nhs.uk"
      confluence_space: "~ABQA1"
      confluence_parent_page: "GH Release Notes"
      file_name: "Release-0.1.0.md"
      version_bump: "PATCH"
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
      # - name: "Bump patch version"
      #   uses: ./.github/actions/versioning
      #   with:
      #     version_bump: ${{ env.version_bump }}
      - name: Publish Release to Confluence
        run: |
          echo "${{ github.event.pull_request.body }}" >> ${{ env.file_name }}
          cat ${{ env.file_name }}
          export CONFLUENCE_USERNAME="${{ secrets.CONFLUENCE_USERNAME }}"
          export CONFLUENCE_ACCESS_TOKEN="${{ secrets.CONFLUENCE_API_TOKEN }}"
          export CONFLUENCE_ENDPOINT="${{ env.confluence_endpoint }}"
          curl -LO https://github.com/justmiles/go-markdown2confluence/releases/download/v3.4.6/go-markdown2confluence_3.4.6_linux_x86_64.tar.gz
          tar -xzvf go-markdown2confluence_3.4.6_linux_x86_64.tar.gz -C /usr/local/bin/ markdown2confluence
          command="markdown2confluence -d -i --space \"${{ env.confluence_space }}\" --parent \"${{ env.confluence_parent_page }}\" \"${{ env.file_name }}\""
          echo $command
          ls -al ${{ env.file_name }}
          echo "Issuing request to publish to Confluence..."
          eval $command
      - name: "create tagged versions of lambdas"
        run: |
          echo "TODO first: create release versions of lambdas"
      - name: "create tagged versions of frontend"
        run: |
          echo "TODO: create release versions of lambdas"
      - name: "create tagged versions of frontend"
        run: |
          echo "TODO: tag main branch"
      # - name: "tag main branch"
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ needs.metadata.outputs.version }}
      #     release_name: Release ${{ needs.metadata.outputs.version }}
      #     body: |
      #       Release of ${{ needs.metadata.outputs.version }}
      #     draft: false
      #     prerelease: false
      # - name: "Upload release asset"
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: "${{ steps.create_release.outputs.upload_url }}"
      #     asset_path: ./*
      #     asset_name: repository-template-${{ needs.metadata.outputs.version }}.tar.gz
      #     asset_content_type: "application/gzip"
