name: "Terraform action"
description: "Build infrastructure"
inputs:
  role-to-assume:
    description: "AWS OIDC role"
    required: false
  aws-region:
    description: "AWS Region"
    required: false
  AWS_BUCKET_NAME:
    description: "Bucket name storing terraform state"
    required: false
  AWS_BUCKET_KEY_NAME:
    description: "File name for state file"
    required: false


runs:
  using: "composite"
  steps:
    - name: Git checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials from AWS account
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ input.AWS_ROLE_ARN }}
        aws-region: ${{ input.AWS_REGION }}
        role-session-name: GitHub-OIDC-TERRAFORM

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Flatten Terrafrom Directory
      id: flatten
      shell: bash
      run: |
        mv ./*/* .
        rm -rf resources

    - name: Terraform fmt
      id: fmt
      shell: bash
      run:
        terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      # env:
        # AWS_BUCKET_NAME: ${{ input.AWS_BUCKET_NAME }}
        # AWS_BUCKET_KEY_NAME: ${{ input.AWS_BUCKET_KEY_NAME }}
      shell: bash
      run: terraform init -backend-config="bucket=${{ input.AWS_BUCKET_NAME }}" -backend-config="key=${{ input.AWS_BUCKET_KEY_NAME }}" -backend-config="region=${{ input.AWS_REGION }}"

    - name: Terraform Destroy
      id: destroy
      shell: bash
      run: terraform destroy -auto-approve

    - name: Terraform Validate
      id: validate
      shell: bash
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      shell: bash
      run:
        terraform plan -no-color

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      shell: bash
      run:
        echo Terraform Plan Status has failed
        exit 1

    - name: Terraform Apply
      shell: bash
      run: terraform apply -auto-approve -input=false
